#!/sbin/sh
export OPENGAZIP="$3"
export OUTFD="/proc/self/fd/$2"
export TMP="/tmp/system-install"
export TMP2="/tmp/sh23"
mkdir $TMP
mkdir $TMP2
ui_print() {
  echo "ui_print $1
    ui_print" >> $OUTFD
  echo "$1" >> $TMP2/log-sh23.txt
}
unzip -o "$OPENGAZIP" -d "$TMP2"
set_perm() {
  chown "$1:$2" "$4"
  chmod "$3" "$4"
}
ch_con() {
  chcon -h u:object_r:system_file:s0 "$1"
}
setup_mountpoint() {
  test -L $1 && mv -f $1 ${1}_link
  if [ ! -d $1 ]; then
    rm -f $1
    mkdir $1
  fi
}
set_progress() { echo "set_progress $1" >> $OUTFD; }
is_mounted() { mount | grep -q " $1 "; }
mount_apex() {
  test -d /system/apex || return 1
  local apex dest loop minorx num
  setup_mountpoint /apex
  test -e /dev/block/loop1 && minorx=$(ls -l /dev/block/loop1 | awk '{ print $6 }') || minorx=1
  num=0
  for apex in /system/apex/*; do
    dest=/apex/$(basename $apex .apex)
    test "$dest" == /apex/com.android.runtime.release && dest=/apex/com.android.runtime
    mkdir -p $dest
    case $apex in
      *.apex)
        unzip -qo $apex apex_payload.img -d /apex
        mv -f /apex/apex_payload.img $dest.img
        mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num
            (mknod $loop b 7 $((num * minorx))
            losetup $loop $dest.img) 2>/dev/null
            num=$((num + 1))
            losetup $loop | grep -q $dest.img && break
          done
          mount -t ext4 -o ro,loop,noatime $loop $dest
          if [ $? != 0 ]; then
            losetup -d $loop 2>/dev/null
          fi
        fi
      ;;
      *) mount -o bind $apex $dest;;
    esac
  done
  export ANDROID_RUNTIME_ROOT=/apex/com.android.runtime
  export ANDROID_TZDATA_ROOT=/apex/com.android.tzdata
  export BOOTCLASSPATH=/apex/com.android.runtime/javalib/core-oj.jar:/apex/com.android.runtime/javalib/core-libart.jar:/apex/com.android.runtime/javalib/okhttp.jar:/apex/com.android.runtime/javalib/bouncycastle.jar:/apex/com.android.runtime/javalib/apache-xml.jar:/system/framework/framework.jar:/system/framework/ext.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/android.test.base.jar:/apex/com.android.conscrypt/javalib/conscrypt.jar:/apex/com.android.media/javalib/updatable-media.jar
}
umount_apex() {
  test -d /apex || return 1
  local dest loop
  for dest in $(find /apex -type d -mindepth 1 -maxdepth 1); do
    if [ -f $dest.img ]; then
      loop=$(mount | grep $dest | cut -d" " -f1)
    fi
    (umount -l $dest
    losetup -d $loop) 2>/dev/null
  done
  rm -rf /apex 2>/dev/null
  unset ANDROID_RUNTIME_ROOT ANDROID_TZDATA_ROOT BOOTCLASSPATH
}
umount_all() {
  (umount_apex
  umount /system
  umount -l /system
  if [ -e /system_root ]; then
    umount /system_root
    umount -l /system_root
  fi
  for p in "/cache" "/persist" "/vendor" "/product"; do
    umount $p
    umount -l $p
  done
  if [ "$UMOUNT_DATA" ]; then
    umount /data
    umount -l /data
  fi) 2>/dev/null
}

ui_print "- Mounting partitions"
set_progress 0.01
mount -a
mount -o rw -t auto /system || mount -o rw -t auto /
mount -o rw -t auto /vendor 2>/dev/null
if [ -d /system/system ];then
  ui_print "System A/B. Montande em um lugar diferente"
  mount --bind /system/system/ /system_root
fi

ui_print " "
set_progress 10.0
#---------------------------------------------------------------------------------
#script
sys_app() {
  for folder in $SYSTEM/app $SYSTEM/product/app $SYSTEM/priv-app $SYSTEM/product/priv-app; do
    if ( grep -q "codePath=\"$folder/$1" /data/system/packages.xml ); then
      return 0
    fi
  done
  return 1
}
if [ -e $TMP2/log-sh23.txt ];then
  rm -rf $TMP2/log-sh23.txt
else
  ui_print " "
fi
ui_print " "
ui_print " "
ui_print " "
ui_print " "
#//\\Mount
if [ -d /system_root ];then
    echo "System as root"
else
    ui_print "System is not System as Root"
fi
if [ -d /system_root ];then
    ui_print "A partição system já está montada"
elif [ -d /system/system ];then
    ui_print "partição montada"
else
    ui_print "Partições não montadas, saindo ..."
    umount_all
    exit
fi
#//\\Mount

#\/System detects
if [ -e /system_root/build.prop ];then
    export SYSTEM=/system_root
    export AS_ROOT="A/B"
else
    export SYSTEM=/system
    export AS_ROOT="A Only"
fi
if [ -d $SYSTEM/product ];then
    export PROD="$SYSTEM/product"
    export PROD_DETECT="$SYSTEM"
elif [ -d /product ];then
    mount product
    export PROD="/product"
    export PROD_DETECT="Raiz do sistema"
else
    export PROD_DETECT="Não tem"
fi
ui_print "Seu sistema é tipo: $AS_ROOT"
ui_print "A pasta PRODUCT: $PROD_DETECT"
#\/System detects

# Change this path to wherever the keycheck binary is located in your installer
KEYCHECK=$TMP2/keycheck
chmod 755 $KEYCHECK

keytest() {
  ui_print "- Vol Key Test -"
  ui_print "   Press a Vol Key:"
  (/system/bin/getevent -lc 1 2>&1 | /system/bin/grep VOLUME | /system/bin/grep " DOWN" > $INSTALLER/events) || return 1
  return 0
}   

choose() {
  #note from chainfire @xda-developers: getevent behaves weird when piped, and busybox grep likes that even less than toolbox/toybox grep
  while true; do
    /system/bin/getevent -lc 1 2>&1 | /system/bin/grep VOLUME | /system/bin/grep " DOWN" > $INSTALLER/events
    if (`cat $INSTALLER/events 2>/dev/null | /system/bin/grep VOLUME >/dev/null`); then
      break
    fi
  done
  if (`cat $INSTALLER/events 2>/dev/null | /system/bin/grep VOLUMEUP >/dev/null`); then
    return 0
  else
    return 1
  fi
}

chooseold() {
  # Calling it first time detects previous input. Calling it second time will do what we want
  $KEYCHECK
  $KEYCHECK
  SEL=$?
  if [ "$1" == "UP" ]; then
    UP=$SEL
  elif [ "$1" == "DOWN" ]; then
    DOWN=$SEL
  elif [ $SEL -eq $UP ]; then
    return 0
  elif [ $SEL -eq $DOWN ]; then
    return 1
  else
    ui_print "   Vol key not detected!"
    abort "   Use name change method in TWRP"
  fi
}
ui_print " "
  if keytest; then
    FUNCTION=choose
  else
    FUNCTION=chooseold
    ui_print "   ! Dispositivo legado detectado! Usando Metodo antigo"
    ui_print " "
    ui_print "- Programando Botão de Volume -"
    ui_print "   Press Vol Up de novo:"
    $FUNCTION "UP"
    ui_print "   Press Vol Down"
    $FUNCTION "DOWN"
  fi
  set_progress 0.10

set_progress 0.30
ui_print " "
#\/Apps detect
if [ -d $SYSTEM/app/YouTube ];then
    ui_print "Removendo o YouTube ¹"
    rm -rf $SYSTEM/app/YouTube
fi
if [ -d $SYSTEM/priv-app/YouTube ];then
    ui_print "Removendo o YouTube ²"
    rm -rf $SYSTEM/priv-app/YouTube
fi
if [ -d $SYSTEM/priv-app/AudioFX ];then
    ui_print "Removendo o AudioFX ¹"
    rm -rf $SYSTEM/priv-app/AudioFX
fi
if [ -d $SYSTEM/app/AudioFX ];then
    ui_print "Removendo o AudioFX ²"
    rm -rf $SYSTEM/priv-app/AudioFX
fi
if [ -d $SYSTEM/priv-app/MusicFX ];then
    ui_print "Removendo o MusicFX ¹"
    rm -rf $SYSTEM/priv-app/MusicFX
fi
if [ -d $SYSTEM/app/MusicFX ];then
    ui_print "Removendo o MusicFX ²"
    rm -rf $SYSTEM/app/MusicFX
fi
if [ -d $PROD/priv-app/Camera2 ];then
    ui_print "Android Camera2 AOSP detectado. removendo ¹"
    rm -rf "$PROD/priv-app/Camera2/*"
    rm -rf "$PROD/priv-app/Camera2"
fi
if [ -d $SYSTEM/app/Camera2 ];then
    ui_print "Android Camera2 AOSP detectado. removendo ²"
    rm -rf "$SYSTEM/app/Camera2/*"
    rm -rf "$SYSTEM/app/Camera2"
fi
if [ -d $PROD/priv-app/camera2 ];then
    ui_print "Android Camera2 AOSP detectado. removendo ²"
    rm -rf "$PROD/priv-app/Camera2/*"
    rm -rf "$PROD/priv-app/Camera2"
fi
if [ -d $SYSTEM/app/camera2 ];then
    ui_print "Android Camera2 AOSP detectado. removendo ²"
    rm -rf "$SYSTEM/app/Camera2/*"
    rm -rf "$SYSTEM/app/Camera2"
fi
if [ -d $PROD/app/Snap ];then
    ui_print "Lineage Camera detectado. removendo ¹"
    rm -rf "$PROD/app/Snap/*"
    rm -rf "$PROD/app/Snap"
fi
if [ -d $PROD/priv-app/Snap ];then
    ui_print "Lineage Camera detectado. removendo ²"
    rm -rf "$PROD/priv-app/Snap/*"
    rm -rf "$PROD/priv-app/Snap"
fi
if [ -d $SYSTEM/app/Snap ];then
    ui_print "Lineage Camera detectado. removendo ¹"
    rm -rf "$SYSTEM/app/Snap/*"
    rm -rf "$SYSTEM/app/Snap"
fi
if [ -d $SYSTEM/priv-app/Snap ];then
    ui_print "Lineage Camera detectado. removendo ²"
    rm -rf "$SYSTEM/priv-app/Snap/*"
    rm -rf "$SYSTEM/priv-app/Snap"
fi
#\/Apps detect
ui_print " "

#/**/***//**/*/*/*/*/*/*/*//
install_extracted() {
  file_list="$(find "$TMP/$1/$1/$1" -mindepth 1 -type f | cut -d/ -f5-)"
  for file in $file_list; do
      ui_print "$TMP/$1/${file}"
      cp -rf "$TMP/$1/${file}" "$SYSTEM/${file}"
      ch_con "$SYSTEM/${file}"
      set_perm 0 0 644 "$SYSTEM/${file}"
  done
}
#/\***\*\**\*\**\*\**\*\*\**\*\**\*\**\*\**\*\*
mkdir $TMP/priv-app/
mkdir $TMP/app/
unzip -o $TMP2/app.zip -d $TMP/app/
unzip -o $TMP2/priv.zip -d $TMP/priv-app/
cp -rf $TMP2/system2/* $TMP

        ui_print " "
        ui_print "Instalando alguns aplicativos no system"
        set_progress 0.40
        install_extracted
        ui_print "Pronto"
        set_progress 0.50
#/\audio
if [ -d $SYSTEM/media/audio ];then
    ui_print "Audio no System"
    cp -rf $TMP2/audio/* $SYSTEM/media/audio
fi
if [ -d $PROD/media/audio ];then
    ui_print "Audio no Product"
    cp -rf $TMP2/audio/* $PROD/media/audio
fi
#/\audio
set_progress 0.60
#\/BOOT

ui_print " "
ui_print "Boot Animation light ou dark"
ui_print "Vol UP dark, Vol DOWN light"
if $FUNCTION; then 
  ANIMA=true
else 
  ANIMA=false
fi
case $ANIMA in
  true ) 
  ui_print "************************************************************************"
    ui_print "Dark"
    if [ -e $PROD/media/bootanimation.zip ];then
        ui_print "Bootanimation no PRODUCT"
        rm -rf $PROD/media/bootanimation.zip
        cp -rf $TMP2/bootanimation/bootanimation-dark.zip $PROD/media/bootanimation.zip
    fi
    if [ -e $PROD/media/bootanimation-dark.zip ];then
        ui_print "Bootanimation dark no PRODUCT"
        rm -rf $PROD/media/bootanimation-dark.zip
        cp -rf $TMP2/bootanimation/bootanimation-dark.zip $PROD/media/bootanimation-dark.zip
    fi
    if [ -e $SYSTEM/media/bootanimation.zip ];then
        ui_print "Bootanimation no SYSTEM"
        rm -rf $SYSTEM/media/bootanimation.zip
        cp -rf $TMP2/bootanimation/bootanimation-dark.zip $SYSTEM/media/bootanimation.zip
    fi
    if [ -e $SYSTEM/media/bootanimation-dark.zip ];then
        ui_print "Bootanimation DARK no SYSTEM"
        rm -rf $SYSTEM/media/bootanimation-dark.zip
        cp -rf $TMP2/bootanimation/bootanimation-dark.zip $SYSTEM/media/bootanimation-dark.zip
    fi
    if [ -d /dev/block/bootdevice/by-name ];then
        ui_print " "
        ui_print "/dev/block/bootdevice/by-name"
        ui_print "Backup do logo_a na pasta /data/backup-sh23/"
        mkdir /data/backup-sh23
        cp -rf /dev/block/bootdevice/by-name/logo_a /data/backup-sh23/logo_a.img
        cp -rf $TMP2/logo-dark.bin /dev/block/bootdevice/by-name/logo_a
        ui_print " "
        ui_print "Backup do logo_b na pasta /data/backup-sh23/"
        mkdir /data/backup-sh23
        cp -rf /dev/block/bootdevice/by-name/logo_b /data/backup-sh23/logo_b.img
        cp -rf $TMP2/logo-dark.bin /dev/block/bootdevice/by-name/logo_b
        ui_print "************************************************************************"
fi
    ;;
  false ) 
    ui_print "**************************************************************************"
    ui_print "Light"
    if [ -e $PROD/media/bootanimation.zip ];then
        ui_print "Bootanimation no PRODUCT"
        rm -rf $PROD/media/bootanimation.zip
        cp -rf $TMP2/bootanimation/bootanimation.zip $PROD/media/bootanimation.zip
    fi
    if [ -e $PROD/media/bootanimation-dark.zip ];then
        ui_print "Bootanimation dark no PRODUCT"
        rm -rf $PROD/media/bootanimation-dark.zip
        cp -rf $TMP2/bootanimation/bootanimation.zip $PROD/media/bootanimation-dark.zip
    fi
    if [ -e $SYSTEM/media/bootanimation.zip ];then
        ui_print "Bootanimation no SYSTEM"
        rm -rf $SYSTEM/media/bootanimation.zip
        cp -rf $TMP2/bootanimation/bootanimation.zip $SYSTEM/media/bootanimation.zip
    fi
    if [ -e $SYSTEM/media/bootanimation-dark.zip ];then
        ui_print "Bootanimation DARK no SYSTEM"
        rm -rf $SYSTEM/media/bootanimation-dark.zip
        cp -rf $TMP2/bootanimation/bootanimation.zip $SYSTEM/media/bootanimation-dark.zip
    fi
    if [ -d /dev/block/bootdevice/by-name ];then
        ui_print " "
        ui_print "/dev/block/bootdevice/by-name"
        ui_print "Backup do logo_a na pasta /data/backup-sh23/"
        mkdir /data/backup-sh23
        cp -rf /dev/block/bootdevice/by-name/logo_a /data/backup-sh23/logo_a.img
        cp -rf $TMP2/logo-light.bin /dev/block/bootdevice/by-name/logo_a
        ui_print " "
        ui_print "Backup do logo_b na pasta /data/backup-sh23/"
        mkdir /data/backup-sh23
        cp -rf /dev/block/bootdevice/by-name/logo_b /data/backup-sh23/logo_b.img
        cp -rf $TMP2/logo-light.bin /dev/block/bootdevice/by-name/logo_b
      ui_print "************************************************************************"
fi
    ;;
esac


#\/BOOT
set_progress 0.70

#---------------------------------------------------------------------------------
#Final do script

  LOGS=true
case $LOGS in
  false ) ui_print "Não vamos copiar o log";;
  true ) ui_print "Copiando os logs"
    cp -rf $TMP2/log-sh23.txt /sdcard/Log-SH23.txt;;
esac
ui_print " "
ui_print "- Completo!"
ui_print "- © Sirherobrine23"
ui_print " "
ui_print " "
ui_print " "
set_progress 0.80
umount_all
set_progress 0.99
exit
